# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when there is a push to the "main" branch.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of the `ECR_REPOSITORY` environment variable in the workflow below with your repository's name.
#    Replace the value of the `AWS_REGION` environment variable in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the value of the `ECS_SERVICE` environment variable in the workflow below with the name you set for the Amazon ECS service.
#    Replace the value of the `ECS_CLUSTER` environment variable in the workflow below with the name you set for the cluster.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of the `ECS_TASK_DEFINITION` environment variable in the workflow below with the path to the JSON file.
#    Replace the value of the `CONTAINER_NAME` environment variable in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

name: Soda Deploy to Amazon ECS

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:


# env:
#   AWS_REGION: MY_AWS_REGION                   # set this to your preferred AWS region, e.g. us-west-1
#   ECR_REPOSITORY: MY_ECR_REPOSITORY           # set this to your Amazon ECR repository name
#   ECS_SERVICE: MY_ECS_SERVICE                 # set this to your Amazon ECS service name
#   ECS_CLUSTER: MY_ECS_CLUSTER                 # set this to your Amazon ECS cluster name
#   ECS_TASK_DEFINITION: MY_ECS_TASK_DEFINITION # set this to the path to your Amazon ECS task definition
#                                                # file, e.g. .aws/task-definition.json
#   CONTAINER_NAME: MY_CONTAINER_NAME           # set this to the name of the container in the
#                                                # containerDefinitions section of your task definition

permissions:
  contents: read

jobs:
  sd-deploy:
    name: Deploy test soda abc
    runs-on: ubuntu-latest
    environment: production

    steps:
      # - run: echo "🎉 The job was automatically triggered by a ${{ github.event_name }} event. o2"
      # - run: echo "🐧 This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      # - run: echo "🔎 The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      # - run: echo "💡 The ${{ github.repository }} repository has been cloned to the runner."
      # - run: echo "🖥️ The workflow is now ready to test your code on the runner."
      # - name: List files in the repository
      #   run: |
      #     ls ${{ github.workspace }}
      # - name: List current files
      #   run: |
      #     ls -al
      # - run: echo "🍏 This job's status is ${{ job.status }}."
      - name: Check out repository code
        uses: actions/checkout@v4
      # - uses: actions/setup-node@v4
      #   with:
      #     node-version: v22.12.0
      # - name: Build vue3
      #   run: npm install && npm run build
      # - name: Run server
      #   run: npm run dev
      # - name: View node version
      #   run: node -v && npm -v
      # - name: Build vue3
      #   run: npm install && npm run build
      # - name: List current files
      #   run: |
      #     ls -al ./dist
      - name: Docker version
        run: docker -v
      - name: Docker compose version
        run: docker compose version
      # - name: Docker login
      #   uses: docker/login-action@v3
      #   with:
      #     username: ${{ secrets.DOCKER_SODA_USERNAME }}
      #     password: ${{ secrets.DOCKER_SODA_PASSWORD }}
      # - name: Set up QEMU
      #   uses: docker/setup-qemu-action@v3
      # - name: Set up Docker Buildx
      #   uses: docker/setup-buildx-action@v3
      # - name: Build and push
      #   uses: docker/build-push-action@v6
      #   with:
      #     push: true
      #     tags: ${{ secrets.DOCKER_SODA_USERNAME }}/internal:githubaction
      #     context: .
      #     file: infrastructure/prod/Dockerfile
      - name: Set up SSH
        run: |
          mkdir -p ./ssh
          echo "${{ secrets.DOCKER_SODA_SSH_PEM }}" > ./ssh/id_rsa
          chmod 600 ./ssh/id_rsa
          cat ./ssh/id_rsa

      - name: SSH and execute script
        run: |
          ssh -i ./ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.DOCKER_SODA_SSH_USER }}@${{ secrets.DOCKER_SODA_SSH_SERVER }} whoami

      # - name: ssh
      #   uses: appleboy/ssh-action@v1.2.0
      #   with:
      #     host: ${{ secrets.DOCKER_SODA_SSH_SERVER }}
      #     username: ${{ secrets.DOCKER_SODA_SSH_USER }}
      #     key: ${{ secrets.DOCKER_SODA_SSH_PEM }}
      #     script: whoami

# echo "${{ secrets.DOCKER_SODA_SSH_PEM }}" > ~/.ssh/id_rsa
#           chmod 600 ~/.ssh/id_rsa
#           ssh-keyscan -H ${{ secrets.DOCKER_SODA_SSH_SERVER }} >> ~/.ssh/known_hosts
# 'bash -s' < ./infrastructure/prod/script.sh

      # - name: Build Docker image
      #   run: |
      #     docker build -t ${{ secrets.DOCKER_SODA_USERNAME }}/internal:githubaction -f infrastructure/prod/Dockerfile .
      # - name: Docker list image
      #   run: docker image ls
      # - name: Push Docker image to Docker Hub
      #   run: |
      #     docker push ${{ secrets.DOCKER_SODA_USERNAME }}/internal:githubaction

      # - name: Install node v20
      #   run: sudo apt update && sudo apt install nodejs && sudo apt install npm && node -v && npm -v

    # - name: Configure AWS credentials
    #   uses: aws-actions/configure-aws-credentials@v1
    #   with:
    #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    #     aws-region: ${{ env.AWS_REGION }}

    # - name: Login to Amazon ECR
    #   id: login-ecr
    #   uses: aws-actions/amazon-ecr-login@v1

    # - name: Build, tag, and push image to Amazon ECR
    #   id: build-image
    #   env:
    #     ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
    #     IMAGE_TAG: ${{ github.sha }}
    #   run: |
    #     # Build a docker container and
    #     # push it to ECR so that it can
    #     # be deployed to ECS.
    #     docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
    #     docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
    #     echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    # - name: Fill in the new image ID in the Amazon ECS task definition
    #   id: task-def
    #   uses: aws-actions/amazon-ecs-render-task-definition@v1
    #   with:
    #     task-definition: ${{ env.ECS_TASK_DEFINITION }}
    #     container-name: ${{ env.CONTAINER_NAME }}
    #     image: ${{ steps.build-image.outputs.image }}

    # - name: Deploy Amazon ECS task definition
    #   uses: aws-actions/amazon-ecs-deploy-task-definition@v1
    #   with:
    #     task-definition: ${{ steps.task-def.outputs.task-definition }}
    #     service: ${{ env.ECS_SERVICE }}
    #     cluster: ${{ env.ECS_CLUSTER }}
    #     wait-for-service-stability: true
